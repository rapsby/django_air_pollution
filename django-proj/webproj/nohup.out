Watching for file changes with StatReloader
Exception in thread django-main-thread:
Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/utils/autoreload.py", line 53, in wrapper
    fn(*args, **kwargs)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/management/commands/runserver.py", line 110, in inner_run
    autoreload.raise_last_exception()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/utils/autoreload.py", line 76, in raise_last_exception
    raise _exception[1]
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/management/__init__.py", line 357, in execute
    autoreload.check_errors(django.setup)()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/utils/autoreload.py", line 53, in wrapper
    fn(*args, **kwargs)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/apps/registry.py", line 91, in populate
    app_config = AppConfig.create(entry)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/apps/config.py", line 90, in create
    module = import_module(entry)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 994, in _gcd_import
  File "<frozen importlib._bootstrap>", line 971, in _find_and_load
  File "<frozen importlib._bootstrap>", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'livereload'

Watching for file changes with StatReloader
[02/Jan/2021 03:25:40] "GET / HTTP/1.1" 200 353
[02/Jan/2021 03:25:42] "GET /coffee/ HTTP/1.1" 200 943
Watching for file changes with StatReloader
[02/Jan/2021 03:31:29] "GET / HTTP/1.1" 200 353
[02/Jan/2021 03:31:30] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:38] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:40] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:51] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:52] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:53] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:31:58] "GET / HTTP/1.1" 200 353
[02/Jan/2021 03:31:59] "GET /coffee/ HTTP/1.1" 200 943
[02/Jan/2021 03:32:26] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:35:41] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:35:42] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:35:42] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:35:43] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:35:43] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:38:14] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 03:50:45] "GET / HTTP/1.1" 200 353
[02/Jan/2021 03:50:47] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 04:10:21] "GET / HTTP/1.1" 200 353
[02/Jan/2021 04:10:23] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 04:42:55] "GET / HTTP/1.1" 200 353
[02/Jan/2021 04:42:57] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 05:17:57] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 05:17:59] "GET /coffee/ HTTP/1.1" 200 944
[02/Jan/2021 05:18:01] "GET / HTTP/1.1" 200 353
Invalid HTTP_HOST header: 'www.baidu.com'. You may need to add 'www.baidu.com' to ALLOWED_HOSTS.
Bad Request: /www.baidu.com:443
[02/Jan/2021 05:22:57] "CONNECT www.baidu.com:443 HTTP/1.0" 400 74704
[02/Jan/2021 05:37:09] "GET / HTTP/1.1" 200 353
Invalid HTTP_HOST header: '123.125.114.144'. You may need to add '123.125.114.144' to ALLOWED_HOSTS.
Bad Request: /http:/123.125.114.144/
[02/Jan/2021 05:53:12] "HEAD http://123.125.114.144/ HTTP/1.1" 400 75697
Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 138, in run
    self.finish_response()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 180, in finish_response
    self.write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 279, in write
    self._write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 453, in _write
    result = self.stdout.write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/socketserver.py", line 803, in write
    self._sock.sendall(b)
ConnectionResetError: [Errno 104] Connection reset by peer
[02/Jan/2021 05:53:12] "HEAD http://123.125.114.144/ HTTP/1.1" 500 59
----------------------------------------
Exception happened during processing of request from ('119.39.47.123', 58656)
Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 138, in run
    self.finish_response()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 180, in finish_response
    self.write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 279, in write
    self._write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 453, in _write
    result = self.stdout.write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/socketserver.py", line 803, in write
    self._sock.sendall(b)
ConnectionResetError: [Errno 104] Connection reset by peer

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 141, in run
    self.handle_error()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/servers/basehttp.py", line 119, in handle_error
    super().handle_error()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 368, in handle_error
    self.finish_response()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 180, in finish_response
    self.write(data)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 274, in write
    self.send_headers()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 331, in send_headers
    if not self.origin_server or self.client_is_modern():
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 344, in client_is_modern
    return self.environ['SERVER_PROTOCOL'].upper() != 'HTTP/0.9'
TypeError: 'NoneType' object is not subscriptable

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/socketserver.py", line 654, in process_request_thread
    self.finish_request(request, client_address)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/socketserver.py", line 364, in finish_request
    self.RequestHandlerClass(request, client_address, self)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/socketserver.py", line 724, in __init__
    self.handle()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/servers/basehttp.py", line 172, in handle
    self.handle_one_request()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/servers/basehttp.py", line 197, in handle_one_request
    handler.run(self.server.get_app())
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/handlers.py", line 144, in run
    self.close()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/servers/basehttp.py", line 114, in close
    super().close()
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/wsgiref/simple_server.py", line 35, in close
    self.status.split(' ',1)[0], self.bytes_sent
AttributeError: 'NoneType' object has no attribute 'split'
----------------------------------------
[02/Jan/2021 06:20:17] "GET / HTTP/1.1" 200 353
Not Found: /favicon.ico
[02/Jan/2021 06:20:18] "GET /favicon.ico HTTP/1.1" 404 2298
[02/Jan/2021 09:24:05] "GET / HTTP/1.1" 200 353
[02/Jan/2021 11:50:10] "GET / HTTP/1.1" 200 353
/home/ubuntu/django_air_pollution/django-proj/webproj/homepage/views.py changed, reloading.
Performing system checks...

System check identified no issues (0 silenced).
January 02, 2021 - 03:27:47
Django version 3.1.4, using settings 'webproj.settings'
Starting development server at http://0.0.0.0:8000/
Quit the server with CONTROL-C.
Watching for file changes with StatReloader
[02/Jan/2021 14:44:52] "GET / HTTP/1.1" 200 353
[02/Jan/2021 14:44:59] "GET /air_pollution HTTP/1.1" 301 0
[02/Jan/2021 14:45:05] "GET /air_pollution/ HTTP/1.1" 200 3466712
/home/ubuntu/django_air_pollution/django-proj/webproj/homepage/views.py changed, reloading.
Performing system checks...

System check identified no issues (0 silenced).
January 02, 2021 - 14:44:49
Django version 3.1.4, using settings 'webproj.settings'
Starting development server at http://0.0.0.0:8000/
Quit the server with CONTROL-C.
Watching for file changes with StatReloader
Internal Server Error: /air_pollution/
Traceback (most recent call last):
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/django/core/handlers/base.py", line 179, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/home/ubuntu/django_air_pollution/django-proj/webproj/homepage/views.py", line 29, in air_pollution_view
    opacity=0.8, marker_color='green')],
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/plotly/graph_objs/_heatmap.py", line 2716, in __init__
    self._process_kwargs(**dict(arg, **kwargs))
  File "/home/ubuntu/anaconda3/envs/pytorch_p36/lib/python3.6/site-packages/plotly/basedatatypes.py", line 4322, in _process_kwargs
    raise err
ValueError: Invalid property specified for object of type plotly.graph_objs.Heatmap: 'mode'

Did you mean "dx"?

    Valid properties:
        autocolorscale
            Determines whether the colorscale is a default palette
            (`autocolorscale: true`) or the palette determined by
            `colorscale`. In case `colorscale` is unspecified or
            `autocolorscale` is true, the default  palette will be
            chosen according to whether numbers in the `color`
            array are all positive, all negative or mixed.
        coloraxis
            Sets a reference to a shared color axis. References to
            these shared color axes are "coloraxis", "coloraxis2",
            "coloraxis3", etc. Settings for these shared color axes
            are set in the layout, under `layout.coloraxis`,
            `layout.coloraxis2`, etc. Note that multiple color
            scales can be linked to the same color axis.
        colorbar
            :class:`plotly.graph_objects.heatmap.ColorBar` instance
            or dict with compatible properties
        colorscale
            Sets the colorscale. The colorscale must be an array
            containing arrays mapping a normalized value to an rgb,
            rgba, hex, hsl, hsv, or named color string. At minimum,
            a mapping for the lowest (0) and highest (1) values are
            required. For example, `[[0, 'rgb(0,0,255)'], [1,
            'rgb(255,0,0)']]`. To control the bounds of the
            colorscale in color space, use`zmin` and `zmax`.
            Alternatively, `colorscale` may be a palette name
            string of the following list: Greys,YlGnBu,Greens,YlOrR
            d,Bluered,RdBu,Reds,Blues,Picnic,Rainbow,Portland,Jet,H
            ot,Blackbody,Earth,Electric,Viridis,Cividis.
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the `z` data are filled in. It is defaulted
            to true if `z` is a one dimensional array and `zsmooth`
            is not false; otherwise it is defaulted to false.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            customdata .
        dx
            Sets the x coordinate step. See `x0` for more info.
        dy
            Sets the y coordinate step. See `y0` for more info.
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            hoverinfo .
        hoverlabel
            :class:`plotly.graph_objects.heatmap.Hoverlabel`
            instance or dict with compatible properties
        hoverongaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the `z` data have hover labels associated
            with them.
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}". https://github.com/d3/d3-3.x-api-
            reference/blob/master/Formatting.md#d3_format for
            details on the formatting syntax. Dates are formatted
            using d3-time-format's syntax %{variable|d3-time-
            format}, for example "Day: %{2019-01-01|%A}".
            https://github.com/d3/d3-time-format#locale_format for
            details on the date formatting syntax. The variables
            available in `hovertemplate` are the ones emitted as
            event data described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            hovertemplate .
        hovertext
            Same as `text`.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            hovertext .
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            ids .
        legendgroup
            Sets the legend group for this trace. Traces part of
            the same legend group hide/show at the same time when
            toggling legend items.
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            meta .
        name
            Sets the trace name. The trace name appear as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        reversescale
            Reverses the color mapping if true. If true, `zmin`
            will correspond to the last color in the array and
            `zmax` will correspond to the first color.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        showscale
            Determines whether or not a colorbar is displayed for
            this trace.
        stream
            :class:`plotly.graph_objects.heatmap.Stream` instance
            or dict with compatible properties
        text
            Sets the text elements associated with each z value.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            text .
        transpose
            Transposes the z data.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        x0
            Alternate to `x`. Builds a linear space of x
            coordinates. Use with `dx` where `x0` is the starting
            coordinate and `dx` the step.
        xaxis
            Sets a reference between this trace's x coordinates and
            a 2D cartesian x axis. If "x" (the default value), the
            x coordinates refer to `layout.xaxis`. If "x2", the x
            coordinates refer to `layout.xaxis2`, and so on.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xgap
            Sets the horizontal gap (in pixels) between bricks.
        xperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the x
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        xperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the x0 axis. When `x0period` is round number
            of weeks, the `x0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        xperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the x axis.
        xsrc
            Sets the source reference on Chart Studio Cloud for  x
            .
        xtype
            If "array", the heatmap's x coordinates are given by
            "x" (the default behavior when `x` is provided). If
            "scaled", the heatmap's x coordinates are given by "x0"
            and "dx" (the default behavior when `x` is not
            provided).
        y
            Sets the y coordinates.
        y0
            Alternate to `y`. Builds a linear space of y
            coordinates. Use with `dy` where `y0` is the starting
            coordinate and `dy` the step.
        yaxis
            Sets a reference between this trace's y coordinates and
            a 2D cartesian y axis. If "y" (the default value), the
            y coordinates refer to `layout.yaxis`. If "y2", the y
            coordinates refer to `layout.yaxis2`, and so on.
        ycalendar
            Sets the calendar system to use with `y` date data.
        ygap
            Sets the vertical gap (in pixels) between bricks.
        yperiod
            Only relevant when the axis `type` is "date". Sets the
            period positioning in milliseconds or "M<n>" on the y
            axis. Special values in the form of "M<n>" could be
            used to declare the number of months. In this case `n`
            must be a positive integer.
        yperiod0
            Only relevant when the axis `type` is "date". Sets the
            base for period positioning in milliseconds or date
            string on the y0 axis. When `y0period` is round number
            of weeks, the `y0period0` by default would be on a
            Sunday i.e. 2000-01-02, otherwise it would be at
            2000-01-01.
        yperiodalignment
            Only relevant when the axis `type` is "date". Sets the
            alignment of data points on the y axis.
        ysrc
            Sets the source reference on Chart Studio Cloud for  y
            .
        ytype
            If "array", the heatmap's y coordinates are given by
            "y" (the default behavior when `y` is provided) If
            "scaled", the heatmap's y coordinates are given by "y0"
            and "dy" (the default behavior when `y` is not
            provided)
        z
            Sets the z data.
        zauto
            Determines whether or not the color domain is computed
            with respect to the input data (here in `z`) or the
            bounds set in `zmin` and `zmax`  Defaults to `false`
            when `zmin` and `zmax` are set by the user.
        zhoverformat
            Sets the hover text formatting rule using d3 formatting
            mini-languages which are very similar to those in
            Python. See: https://github.com/d3/d3-3.x-api-
            reference/blob/master/Formatting.md#d3_format
        zmax
            Sets the upper bound of the color domain. Value should
            have the same units as in `z` and if set, `zmin` must
            be set as well.
        zmid
            Sets the mid-point of the color domain by scaling
            `zmin` and/or `zmax` to be equidistant to this point.
            Value should have the same units as in `z`. Has no
            effect when `zauto` is `false`.
        zmin
            Sets the lower bound of the color domain. Value should
            have the same units as in `z` and if set, `zmax` must
            be set as well.
        zsmooth
            Picks a smoothing algorithm use to smooth `z` data.
        zsrc
            Sets the source reference on Chart Studio Cloud for  z
            .
        
Did you mean "dx"?

Bad property path:
mode
^^^^
[02/Jan/2021 14:45:23] "GET /air_pollution/ HTTP/1.1" 500 141117
/home/ubuntu/django_air_pollution/django-proj/webproj/homepage/views.py changed, reloading.
Performing system checks...

System check identified no issues (0 silenced).
January 02, 2021 - 14:45:23
Django version 3.1.4, using settings 'webproj.settings'
Starting development server at http://0.0.0.0:8000/
Quit the server with CONTROL-C.
Watching for file changes with StatReloader
[02/Jan/2021 14:45:36] "GET /air_pollution/ HTTP/1.1" 200 3466712
